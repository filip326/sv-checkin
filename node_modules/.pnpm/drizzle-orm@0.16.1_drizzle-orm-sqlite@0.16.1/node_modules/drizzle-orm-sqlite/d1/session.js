"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PreparedQuery = exports.SQLiteD1Session = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const sql_1 = require("drizzle-orm/sql");
const utils_1 = require("drizzle-orm/utils");
const session_1 = require("../session");
class SQLiteD1Session extends session_1.SQLiteSession {
    constructor(client, dialect, options = {}) {
        var _a;
        super(dialect);
        this.client = client;
        this.logger = (_a = options.logger) !== null && _a !== void 0 ? _a : new drizzle_orm_1.NoopLogger();
    }
    exec(query) {
        throw Error('To implement: D1 migrator');
        // await this.client.exec(query.sql);
    }
    prepareQuery(query, fields) {
        const stmt = this.client.prepare(query.sql);
        return new PreparedQuery(stmt, query.sql, query.params, this.logger, fields);
    }
}
exports.SQLiteD1Session = SQLiteD1Session;
class PreparedQuery extends session_1.PreparedQuery {
    constructor(stmt, queryString, params, logger, fields) {
        super();
        this.stmt = stmt;
        this.queryString = queryString;
        this.params = params;
        this.logger = logger;
        this.fields = fields;
    }
    run(placeholderValues) {
        const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues !== null && placeholderValues !== void 0 ? placeholderValues : {});
        this.logger.logQuery(this.queryString, params);
        return this.stmt.bind(...params).run();
    }
    all(placeholderValues) {
        const { fields } = this;
        if (fields) {
            return this.values(placeholderValues).then((values) => values.map((row) => (0, utils_1.mapResultRow)(fields, row)));
        }
        const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues !== null && placeholderValues !== void 0 ? placeholderValues : {});
        this.logger.logQuery(this.queryString, params);
        return this.stmt.bind(...params).all().then(({ results }) => results);
    }
    get(placeholderValues) {
        // TODO: implement using stmt.get()
        return this.all(placeholderValues).then((rows) => rows[0]);
    }
    values(placeholderValues) {
        const params = (0, sql_1.fillPlaceholders)(this.params, placeholderValues !== null && placeholderValues !== void 0 ? placeholderValues : {});
        this.logger.logQuery(this.queryString, params);
        return this.stmt.bind(...params).raw();
    }
}
exports.PreparedQuery = PreparedQuery;
//# sourceMappingURL=session.js.map