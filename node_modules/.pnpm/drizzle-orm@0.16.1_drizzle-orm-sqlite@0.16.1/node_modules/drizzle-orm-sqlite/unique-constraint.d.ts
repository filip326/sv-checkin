import { AnySQLiteColumn } from './columns';
import { AnySQLiteTable } from './table';
export declare class UniqueBuilder<TTableName extends string> {
    name: string;
    column: AnySQLiteColumn;
    protected brand: 'SQLiteConstraintBuilder';
    constructor(name: string, column: AnySQLiteColumn);
}
export declare type AnyUniqueBuilder<TTableName extends string = string> = UniqueBuilder<TTableName>;
export declare class Unique<TTableName extends string> {
    table: AnySQLiteTable<{
        name: TTableName;
    }>;
    readonly name: string;
    readonly column: AnySQLiteColumn;
    constructor(table: AnySQLiteTable<{
        name: TTableName;
    }>, builder: UniqueBuilder<TTableName>);
}
export declare type BuildUnique<T extends AnyUniqueBuilder> = T extends UniqueBuilder<infer TTableName> ? Unique<TTableName> : never;
export declare type AnyUnique = Unique<string>;
export declare function unique<TTableName extends string>(name: string, column: AnySQLiteColumn<{
    tableName: TTableName;
}>): UniqueBuilder<TTableName>;
//# sourceMappingURL=unique-constraint.d.ts.map