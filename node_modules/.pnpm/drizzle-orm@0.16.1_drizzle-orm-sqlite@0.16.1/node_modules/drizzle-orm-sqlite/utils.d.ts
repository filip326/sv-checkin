import { SelectFieldsOrdered, SQLiteSelectFields } from './operations';
import { AnySQLiteTable } from './table';
export declare function getTableColumns<TTable extends AnySQLiteTable>(table: TTable): import("./columns").AnySQLiteColumn<{}>[];
export declare function getTableIndexes<TTable extends AnySQLiteTable>(table: TTable): import("./indexes").Index[];
export declare function getTableForeignKeys<TTable extends AnySQLiteTable>(table: TTable): import("./foreign-keys").ForeignKey[];
export declare function getTableCompositePrimaryKeys<TTable extends AnySQLiteTable>(table: TTable): import("./primary-keys").PrimaryKey[];
export declare function getTableChecks<TTable extends AnySQLiteTable>(table: TTable): import("./checks").Check[];
export declare type OnConflict = 'rollback' | 'abort' | 'fail' | 'ignore' | 'replace';
export declare type Assume<T, U> = T extends U ? T : U;
export declare function orderSelectedFields(fields: SQLiteSelectFields, pathPrefix?: string[]): SelectFieldsOrdered;
//# sourceMappingURL=utils.d.ts.map