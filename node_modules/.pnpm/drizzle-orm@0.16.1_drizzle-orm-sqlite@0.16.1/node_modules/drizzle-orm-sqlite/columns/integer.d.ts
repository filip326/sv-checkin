import { ColumnBaseConfig } from 'drizzle-orm';
import { ColumnBuilderBaseConfig, ColumnBuilderConfig, UpdateCBConfig } from 'drizzle-orm/column-builder';
import { SQL } from 'drizzle-orm/sql';
import { OnConflict } from '../utils';
import { AnySQLiteTable } from '../table';
import { SQLiteColumn, SQLiteColumnBuilder } from './common';
export interface PrimaryKeyConfig {
    autoIncrement?: boolean;
    onConflict?: OnConflict;
}
export declare abstract class SQLiteIntegerBaseBuilder<T extends ColumnBuilderBaseConfig = ColumnBuilderConfig> extends SQLiteColumnBuilder<Pick<T, keyof ColumnBuilderBaseConfig>, {
    autoIncrement: boolean;
}> {
    constructor(name: string);
    notNull(): SQLiteIntegerBaseBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    default(value: T['data'] | SQL): SQLiteIntegerBaseBuilder<UpdateCBConfig<T, {
        hasDefault: true;
    }>>;
    primaryKey(config?: PrimaryKeyConfig): SQLiteIntegerBaseBuilder<UpdateCBConfig<T, {
        notNull: true;
        hasDefault: true;
    }>>;
}
export declare abstract class SQLiteBaseInteger<T extends ColumnBaseConfig> extends SQLiteColumn<Pick<T, keyof ColumnBaseConfig>> {
    readonly table: AnySQLiteTable<{
        name: T['tableName'];
    }>;
    protected $sqliteColumnBrand: 'SQLiteInteger';
    readonly autoIncrement: boolean;
    constructor(table: AnySQLiteTable<{
        name: T['tableName'];
    }>, config: SQLiteIntegerBaseBuilder<Omit<T, 'tableName'>>['config']);
    getSQLType(): string;
}
interface SQLiteIntegerConfig {
    data: number;
    driverParam: number;
}
export declare class SQLiteIntegerBuilder<T extends Pick<ColumnBuilderBaseConfig, 'notNull' | 'hasDefault'> = {
    notNull: false;
    hasDefault: false;
}> extends SQLiteIntegerBaseBuilder<SQLiteIntegerConfig & Pick<T, 'notNull' | 'hasDefault'>> {
    build<TTableName extends string>(table: AnySQLiteTable<{
        name: TTableName;
    }>): SQLiteInteger<Pick<T, 'notNull' | 'hasDefault'> & {
        tableName: TTableName;
    }>;
}
export declare class SQLiteInteger<T extends Pick<ColumnBaseConfig, 'tableName' | 'notNull' | 'hasDefault'>> extends SQLiteBaseInteger<SQLiteIntegerConfig & Pick<T, 'tableName' | 'notNull' | 'hasDefault'>> {
}
interface SQLiteTimestampConfig {
    data: Date;
    driverParam: number;
}
export declare class SQLiteTimestampBuilder<T extends Pick<ColumnBuilderBaseConfig, 'notNull' | 'hasDefault'> = {
    notNull: false;
    hasDefault: false;
}> extends SQLiteIntegerBaseBuilder<SQLiteTimestampConfig & Pick<T, 'notNull' | 'hasDefault'>> {
    notNull(): SQLiteTimestampBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    default(value: Date | SQL): SQLiteTimestampBuilder<UpdateCBConfig<T, {
        hasDefault: true;
    }>>;
    primaryKey(config?: PrimaryKeyConfig): SQLiteTimestampBuilder<{
        notNull: true;
        hasDefault: true;
    }>;
    /**
     * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.
     */
    defaultNow(): SQLiteTimestampBuilder<UpdateCBConfig<T, {
        hasDefault: true;
    }>>;
    build<TTableName extends string>(table: AnySQLiteTable<{
        name: TTableName;
    }>): SQLiteTimestamp<Pick<T, 'notNull' | 'hasDefault'> & {
        tableName: TTableName;
    }>;
}
export declare class SQLiteTimestamp<T extends Pick<ColumnBaseConfig, 'tableName' | 'notNull' | 'hasDefault'>> extends SQLiteBaseInteger<SQLiteTimestampConfig & Pick<T, 'tableName' | 'notNull' | 'hasDefault'>> {
    mapFromDriverValue(value: number): Date;
    mapToDriverValue(value: Date): number;
}
export interface IntegerConfig<TMode extends 'number' | 'timestamp' = 'number' | 'timestamp'> {
    mode: TMode;
}
export declare function integer(name: string, config?: IntegerConfig<'number'>): SQLiteIntegerBuilder;
export declare function integer(name: string, config?: IntegerConfig<'timestamp'>): SQLiteTimestampBuilder;
export declare const int: typeof integer;
export {};
//# sourceMappingURL=integer.d.ts.map