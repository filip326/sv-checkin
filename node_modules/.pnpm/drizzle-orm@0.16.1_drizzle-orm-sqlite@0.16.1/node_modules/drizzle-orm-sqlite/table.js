"use strict";
var _a, _b, _c, _d;
Object.defineProperty(exports, "__esModule", { value: true });
exports.sqliteTable = exports.SQLiteTable = exports.ConflictConstraints = exports.Checks = exports.PrimaryKeys = exports.ForeignKeys = exports.Indexes = void 0;
const table_1 = require("drizzle-orm/table");
const checks_1 = require("./checks");
const foreign_keys_1 = require("./foreign-keys");
const indexes_1 = require("./indexes");
const primary_keys_1 = require("./primary-keys");
/** @internal */
exports.Indexes = Symbol('Indexes');
/** @internal */
exports.ForeignKeys = Symbol('ForeignKeys');
/** @internal */
exports.PrimaryKeys = Symbol('PrimaryKeys');
/** @internal */
exports.Checks = Symbol('Checks');
/** @internal */
exports.ConflictConstraints = Symbol('ConflictConstraints');
class SQLiteTable extends table_1.Table {
    constructor() {
        super(...arguments);
        /** @internal */
        this[_a] = {};
        /** @internal */
        this[_b] = {};
        /** @internal */
        this[_c] = {};
        /** @internal */
        this[_d] = {};
    }
    toString() {
        return this[table_1.Table.Symbol.Name];
    }
}
exports.SQLiteTable = SQLiteTable;
table_1.Table.Symbol.Columns, _a = exports.Indexes, _b = exports.ForeignKeys, _c = exports.PrimaryKeys, _d = exports.Checks;
/** @internal */
SQLiteTable.Symbol = Object.assign(table_1.Table.Symbol, {
    Indexes: exports.Indexes,
    ForeignKeys: exports.ForeignKeys,
    Checks: exports.Checks,
    PrimaryKeys: exports.PrimaryKeys,
    ConflictConstraints: exports.ConflictConstraints,
});
function sqliteTable(name, columns, extraConfig) {
    const rawTable = new SQLiteTable(name);
    const builtColumns = Object.fromEntries(Object.entries(columns).map(([name, colBuilder]) => {
        const column = colBuilder.build(rawTable);
        colBuilder.buildForeignKeys(column, rawTable).forEach((fk, fkIndex) => {
            rawTable[exports.ForeignKeys][Symbol(`${name}_${fkIndex}`)] = fk;
        });
        return [name, column];
    }));
    rawTable[table_1.Table.Symbol.Columns] = builtColumns;
    const table = Object.assign(rawTable, builtColumns);
    table[table_1.Table.Symbol.Columns] = builtColumns;
    if (extraConfig) {
        const builtConfig = extraConfig(table);
        Object.entries(builtConfig).forEach(([name, builder]) => {
            if (builder instanceof indexes_1.IndexBuilder) {
                table[exports.Indexes][name] = builder.build(table);
            }
            else if (builder instanceof checks_1.CheckBuilder) {
                table[exports.Checks][name] = builder.build(table);
            }
            else if (builder instanceof foreign_keys_1.ForeignKeyBuilder) {
                table[exports.ForeignKeys][name] = builder.build(table);
            }
            else if (builder instanceof primary_keys_1.PrimaryKeyBuilder) {
                table[exports.PrimaryKeys][name] = builder.build(table);
            }
        });
    }
    return table;
}
exports.sqliteTable = sqliteTable;
//# sourceMappingURL=table.js.map