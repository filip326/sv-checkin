"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.orderSelectedFields = exports.mapUpdateSet = exports.getTableChecks = exports.getTableCompositePrimaryKeys = exports.getTableForeignKeys = exports.getTableIndexes = exports.getTableColumns = void 0;
const drizzle_orm_1 = require("drizzle-orm");
const sql_1 = require("drizzle-orm/sql");
const columns_1 = require("./columns");
const table_1 = require("./table");
function getTableColumns(table) {
    const columns = table[table_1.SQLiteTable.Symbol.Columns];
    const keys = Reflect.ownKeys(columns);
    return keys.map((key) => columns[key]);
}
exports.getTableColumns = getTableColumns;
function getTableIndexes(table) {
    const indexes = table[table_1.SQLiteTable.Symbol.Indexes];
    const keys = Reflect.ownKeys(indexes);
    return keys.map((key) => indexes[key]);
}
exports.getTableIndexes = getTableIndexes;
function getTableForeignKeys(table) {
    const foreignKeys = table[table_1.SQLiteTable.Symbol.ForeignKeys];
    const keys = Reflect.ownKeys(foreignKeys);
    return keys.map((key) => foreignKeys[key]);
}
exports.getTableForeignKeys = getTableForeignKeys;
function getTableCompositePrimaryKeys(table) {
    const primaryKeys = table[table_1.SQLiteTable.Symbol.PrimaryKeys];
    const keys = Reflect.ownKeys(primaryKeys);
    return keys.map((key) => primaryKeys[key]);
}
exports.getTableCompositePrimaryKeys = getTableCompositePrimaryKeys;
function getTableChecks(table) {
    const checks = table[table_1.SQLiteTable.Symbol.Checks];
    const keys = Reflect.ownKeys(checks);
    return keys.map((key) => checks[key]);
}
exports.getTableChecks = getTableChecks;
/** @internal */
function mapUpdateSet(table, values) {
    return Object.fromEntries(Object.entries(values).map(([key, value]) => {
        if (value instanceof sql_1.SQL || value === null || value === undefined) {
            return [key, value];
        }
        else {
            return [key, new sql_1.Param(value, table[table_1.SQLiteTable.Symbol.Columns][key])];
        }
    }));
}
exports.mapUpdateSet = mapUpdateSet;
function orderSelectedFields(fields, pathPrefix) {
    return Object.entries(fields).reduce((result, [name, field]) => {
        if (typeof name !== 'string') {
            return result;
        }
        const newPath = pathPrefix ? [...pathPrefix, name] : [name];
        if (field instanceof columns_1.SQLiteColumn
            || field instanceof sql_1.SQL
            || field instanceof sql_1.SQLResponse) {
            result.push({ path: newPath, field });
        }
        else if (field instanceof table_1.SQLiteTable) {
            result.push(...orderSelectedFields(field[drizzle_orm_1.Table.Symbol.Columns], newPath));
        }
        else {
            result.push(...orderSelectedFields(field, newPath));
        }
        return result;
    }, []);
}
exports.orderSelectedFields = orderSelectedFields;
//# sourceMappingURL=utils.js.map