import { Query, SQL, SQLWrapper } from 'drizzle-orm/sql';
import { SQLiteDialect } from '../dialect';
import { SelectFieldsOrdered, SelectResultFields, SQLiteSelectFields } from '../operations';
import { PreparedQuery, SQLiteSession } from '../session';
import { AnySQLiteTable, InferModel } from '../table';
export interface SQLiteDeleteConfig {
    where?: SQL | undefined;
    table: AnySQLiteTable;
    returning?: SelectFieldsOrdered;
}
export interface SQLiteDelete<TTable extends AnySQLiteTable, TResultType extends 'sync' | 'async', TRunResult, TReturning = undefined> extends SQLWrapper {
}
export declare class SQLiteDelete<TTable extends AnySQLiteTable, TResultType extends 'sync' | 'async', TRunResult, TReturning = undefined> implements SQLWrapper {
    private table;
    private session;
    private dialect;
    private config;
    constructor(table: TTable, session: SQLiteSession, dialect: SQLiteDialect);
    where(where: SQL | undefined): Omit<this, 'where'>;
    returning(): Omit<SQLiteDelete<TTable, TResultType, TRunResult, InferModel<TTable>>, 'where' | 'returning'>;
    returning<TSelectedFields extends SQLiteSelectFields>(fields: TSelectedFields): Omit<SQLiteDelete<TTable, TResultType, TRunResult, SelectResultFields<TSelectedFields>>, 'where' | 'returning'>;
    toSQL(): Query;
    prepare(): PreparedQuery<{
        type: TResultType;
        run: TRunResult;
        all: TReturning extends undefined ? never : TReturning[];
        get: TReturning extends undefined ? never : TReturning | undefined;
        values: TReturning extends undefined ? never : any[][];
    }>;
    run: ReturnType<this['prepare']>['run'];
    all: ReturnType<this['prepare']>['all'];
    get: ReturnType<this['prepare']>['get'];
    values: ReturnType<this['prepare']>['values'];
}
//# sourceMappingURL=delete.d.ts.map