/// <reference types="node" />
/// <reference types="bun-types" />
import { ColumnConfig } from 'drizzle-orm';
import { ColumnBuilderConfig } from 'drizzle-orm/column-builder';
import { SQLiteColumn, SQLiteColumnBuilder } from './common';
declare type BlobMode = 'buffer' | 'json';
export declare class SQLiteBlobJsonBuilder<TData> extends SQLiteColumnBuilder<ColumnBuilderConfig & {
    data: TData;
    driverParam: Buffer;
}> {
}
export declare class SQLiteBlobJson<TTableName extends string, TData> extends SQLiteColumn<ColumnConfig<{
    tableName: TTableName;
    data: TData;
    driverParam: Buffer;
}>> {
    protected $sqliteColumnBrand: 'SQLiteBlobJson';
    getSQLType(): string;
    mapFromDriverValue(value: Buffer): TData;
    mapToDriverValue(value: TData): Buffer;
}
export declare class SQLiteBlobBufferBuilder extends SQLiteColumnBuilder<ColumnBuilderConfig<{
    data: Buffer;
    driverParam: Buffer;
}>> {
}
export declare class SQLiteBlobBuffer<TTableName extends string> extends SQLiteColumn<ColumnConfig<{
    tableName: TTableName;
    data: Buffer;
    driverParam: Buffer;
}>> {
    protected $sqliteColumnBrand: 'SQLiteBlobBuffer';
    getSQLType(): string;
}
export interface BlobConfig<TMode extends BlobMode = BlobMode> {
    mode: TMode;
}
export declare function blob(name: string, config?: BlobConfig<'buffer'>): SQLiteBlobBufferBuilder;
export declare function blob<T>(name: string, config: BlobConfig<'json'>): SQLiteBlobJsonBuilder<T>;
export {};
//# sourceMappingURL=blob.d.ts.map