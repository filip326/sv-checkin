import { Column, ColumnBaseConfig } from 'drizzle-orm';
import { ColumnBuilder, ColumnBuilderBaseConfig, ColumnBuilderWithConfig, UpdateCBConfig } from 'drizzle-orm/column-builder';
import { SQL } from 'drizzle-orm/sql';
import { Update } from 'drizzle-orm/utils';
import { Simplify } from 'drizzle-orm/utils';
import { UpdateDeleteAction } from '../foreign-keys';
import { AnySQLiteTable } from '../table';
export interface ReferenceConfig {
    ref: () => AnySQLiteColumn;
    actions: {
        onUpdate?: UpdateDeleteAction;
        onDelete?: UpdateDeleteAction;
    };
}
export declare abstract class SQLiteColumnBuilder<T extends Partial<ColumnBuilderBaseConfig>, TConfig extends Record<string, unknown> = {}> extends ColumnBuilder<T, TConfig> {
    private foreignKeyConfigs;
    constructor(name: string);
    notNull(): SQLiteColumnBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    default(value: T['data'] | SQL): SQLiteColumnBuilder<UpdateCBConfig<T, {
        hasDefault: true;
    }>>;
    primaryKey(): SQLiteColumnBuilder<UpdateCBConfig<T, {
        notNull: true;
    }>>;
    references(ref: ReferenceConfig['ref'], actions?: ReferenceConfig['actions']): this;
}
export declare type AnySQLiteColumnBuilder<TPartial extends Partial<ColumnBuilderBaseConfig> = {}> = SQLiteColumnBuilder<Update<ColumnBuilderBaseConfig, TPartial>>;
export declare abstract class SQLiteColumn<T extends Partial<ColumnBaseConfig>> extends Column<T> {
    readonly table: AnySQLiteTable<{
        name: T['tableName'];
    }>;
    protected $pgBrand: 'SQLiteColumn';
    protected abstract $sqliteColumnBrand: string;
    constructor(table: AnySQLiteTable<{
        name: T['tableName'];
    }>, config: SQLiteColumnBuilder<Omit<T, 'tableName'>>['config']);
    unsafe(): AnySQLiteColumn;
}
export declare type AnySQLiteColumn<TPartial extends Partial<ColumnBaseConfig> = {}> = SQLiteColumn<Update<ColumnBaseConfig, TPartial>>;
export declare type BuildColumn<TTableName extends string, TBuilder extends AnySQLiteColumnBuilder> = TBuilder extends ColumnBuilderWithConfig<infer T> ? SQLiteColumn<Simplify<T & {
    tableName: TTableName;
}>> : never;
export declare type BuildColumns<TTableName extends string, TConfigMap extends Record<string, AnySQLiteColumnBuilder>> = Simplify<{
    [Key in keyof TConfigMap]: BuildColumn<TTableName, TConfigMap[Key]>;
}>;
export declare type ChangeColumnTableName<TColumn extends AnySQLiteColumn, TAlias extends string> = TColumn extends SQLiteColumn<infer T> ? SQLiteColumn<Simplify<Omit<T, 'tableName'> & {
    tableName: TAlias;
}>> : never;
//# sourceMappingURL=common.d.ts.map