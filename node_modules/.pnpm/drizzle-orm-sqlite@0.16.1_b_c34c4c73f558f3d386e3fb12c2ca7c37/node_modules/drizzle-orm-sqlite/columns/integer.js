"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.int = exports.integer = exports.SQLiteTimestamp = exports.SQLiteTimestampBuilder = exports.SQLiteInteger = exports.SQLiteIntegerBuilder = exports.SQLiteBaseInteger = exports.SQLiteIntegerBaseBuilder = void 0;
const sql_1 = require("drizzle-orm/sql");
const common_1 = require("./common");
class SQLiteIntegerBaseBuilder extends common_1.SQLiteColumnBuilder {
    constructor(name) {
        super(name);
        this.config.autoIncrement = false;
    }
    notNull() {
        return super.notNull();
    }
    default(value) {
        return super.default(value);
    }
    primaryKey(config) {
        if (config === null || config === void 0 ? void 0 : config.autoIncrement) {
            this.config.autoIncrement = true;
        }
        this.config.hasDefault = true;
        return super.primaryKey();
    }
}
exports.SQLiteIntegerBaseBuilder = SQLiteIntegerBaseBuilder;
class SQLiteBaseInteger extends common_1.SQLiteColumn {
    constructor(table, config) {
        super(table, config);
        this.table = table;
        this.autoIncrement = config.autoIncrement;
    }
    getSQLType() {
        return 'integer';
    }
}
exports.SQLiteBaseInteger = SQLiteBaseInteger;
class SQLiteIntegerBuilder extends SQLiteIntegerBaseBuilder {
    build(table) {
        return new SQLiteInteger(table, this.config);
    }
}
exports.SQLiteIntegerBuilder = SQLiteIntegerBuilder;
class SQLiteInteger extends SQLiteBaseInteger {
}
exports.SQLiteInteger = SQLiteInteger;
class SQLiteTimestampBuilder extends SQLiteIntegerBaseBuilder {
    notNull() {
        return super.notNull();
    }
    default(value) {
        return super.default(value);
    }
    primaryKey(config) {
        return super.primaryKey(config);
    }
    /**
     * Adds `DEFAULT (cast((julianday('now') - 2440587.5)*86400000 as integer))` to the column, which is the current epoch timestamp in milliseconds.
     */
    defaultNow() {
        return this.default((0, sql_1.sql) `(cast((julianday('now') - 2440587.5)*86400000 as integer))`);
    }
    build(table) {
        return new SQLiteTimestamp(table, this.config);
    }
}
exports.SQLiteTimestampBuilder = SQLiteTimestampBuilder;
class SQLiteTimestamp extends SQLiteBaseInteger {
    mapFromDriverValue(value) {
        return new Date(value);
    }
    mapToDriverValue(value) {
        return value.getTime();
    }
}
exports.SQLiteTimestamp = SQLiteTimestamp;
function integer(name, config) {
    if ((config === null || config === void 0 ? void 0 : config.mode) === 'timestamp') {
        return new SQLiteTimestampBuilder(name);
    }
    return new SQLiteIntegerBuilder(name);
}
exports.integer = integer;
exports.int = integer;
//# sourceMappingURL=integer.js.map