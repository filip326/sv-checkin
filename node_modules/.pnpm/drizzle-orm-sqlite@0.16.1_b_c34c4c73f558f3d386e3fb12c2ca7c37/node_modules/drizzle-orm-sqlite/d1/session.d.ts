/// <reference types="@cloudflare/workers-types" />
import { Logger } from 'drizzle-orm';
import { Query } from 'drizzle-orm/sql';
import { SQLiteAsyncDialect } from '../dialect';
import { SelectFieldsOrdered } from '../operations';
import { PreparedQuery as PreparedQueryBase, PreparedQueryConfig as PreparedQueryConfigBase, SQLiteSession } from '../session';
export interface SQLiteD1SessionOptions {
    logger?: Logger;
}
declare type PreparedQueryConfig = Omit<PreparedQueryConfigBase, 'statement' | 'run'>;
export declare class SQLiteD1Session extends SQLiteSession<'async', D1Result> {
    private client;
    private logger;
    constructor(client: D1Database, dialect: SQLiteAsyncDialect, options?: SQLiteD1SessionOptions);
    exec(query: string): void;
    prepareQuery(query: Query, fields?: SelectFieldsOrdered): PreparedQuery;
}
export declare class PreparedQuery<T extends PreparedQueryConfig = PreparedQueryConfig> extends PreparedQueryBase<{
    type: 'async';
    run: D1Result;
    all: T['all'];
    get: T['get'];
    values: T['values'];
}> {
    private stmt;
    private queryString;
    private params;
    private logger;
    private fields;
    constructor(stmt: D1PreparedStatement, queryString: string, params: unknown[], logger: Logger, fields: SelectFieldsOrdered | undefined);
    run(placeholderValues?: Record<string, unknown>): Promise<D1Result>;
    all(placeholderValues?: Record<string, unknown>): Promise<T['all']>;
    get(placeholderValues?: Record<string, unknown>): Promise<T['get']>;
    values<T extends any[] = unknown[]>(placeholderValues?: Record<string, unknown>): Promise<T[]>;
}
export {};
//# sourceMappingURL=session.d.ts.map