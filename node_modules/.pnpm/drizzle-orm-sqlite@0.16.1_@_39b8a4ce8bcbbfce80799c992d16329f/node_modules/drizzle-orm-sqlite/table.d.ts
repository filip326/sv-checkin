import { GetColumnData } from 'drizzle-orm';
import { OptionalKeyOnly, RequiredKeyOnly } from 'drizzle-orm/operations';
import { Table } from 'drizzle-orm/table';
import { Update } from 'drizzle-orm/utils';
import { Simplify } from 'drizzle-orm/utils';
import { CheckBuilder } from './checks';
import { AnySQLiteColumn, AnySQLiteColumnBuilder, BuildColumns } from './columns/common';
import { ForeignKeyBuilder } from './foreign-keys';
import { IndexBuilder } from './indexes';
import { PrimaryKeyBuilder } from './primary-keys';
export declare type SQLiteTableExtraConfig = Record<string, IndexBuilder | CheckBuilder | ForeignKeyBuilder | PrimaryKeyBuilder>;
export interface TableConfig {
    name: string;
    columns: Record<string | symbol, AnySQLiteColumn>;
}
export declare type UpdateTableConfig<T extends TableConfig, TUpdate extends Partial<TableConfig>> = Update<T, TUpdate>;
export declare class SQLiteTable<T extends Partial<TableConfig>> extends Table<T['name']> {
    protected $columns: T['columns'];
    toString(): T['name'];
}
export declare type AnySQLiteTable<TPartial extends Partial<TableConfig> = {}> = SQLiteTable<Update<TableConfig, TPartial>>;
export declare type SQLiteTableWithColumns<T extends TableConfig> = SQLiteTable<T> & {
    [Key in keyof T['columns']]: T['columns'][Key];
};
/**
 * See `GetColumnConfig`.
 */
export declare type GetTableConfig<T extends AnySQLiteTable, TParam extends keyof TableConfig | undefined = undefined> = T extends SQLiteTableWithColumns<infer TConfig> ? TParam extends undefined ? TConfig : TParam extends keyof TConfig ? TConfig[TParam] : TConfig : never;
export declare type InferModel<TTable extends AnySQLiteTable, TInferMode extends 'select' | 'insert' = 'select'> = TInferMode extends 'insert' ? Simplify<{
    [Key in keyof GetTableConfig<TTable, 'columns'> & string as RequiredKeyOnly<Key, GetTableConfig<TTable, 'columns'>[Key]>]: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'>;
} & {
    [Key in keyof GetTableConfig<TTable, 'columns'> & string as OptionalKeyOnly<Key, GetTableConfig<TTable, 'columns'>[Key]>]?: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'>;
}> : {
    [Key in keyof GetTableConfig<TTable, 'columns'>]: GetColumnData<GetTableConfig<TTable, 'columns'>[Key], 'query'>;
};
export interface SQLiteTableConfig<TName extends string> {
    name: TName;
    temporary?: boolean;
}
export declare function sqliteTable<TTableName extends string, TColumnsMap extends Record<string, AnySQLiteColumnBuilder>>(name: TTableName, columns: TColumnsMap, extraConfig?: (self: BuildColumns<TTableName, TColumnsMap>) => SQLiteTableExtraConfig): SQLiteTableWithColumns<{
    name: TTableName;
    columns: BuildColumns<TTableName, TColumnsMap>;
}>;
//# sourceMappingURL=table.d.ts.map