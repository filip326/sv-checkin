import { Placeholder, Query, SQL, SQLWrapper } from 'drizzle-orm/sql';
import { AnySQLiteColumn } from '../columns';
import { SQLiteDialect } from '../dialect';
import { SQLiteSelectFields } from '../operations';
import { PreparedQuery, SQLiteSession } from '../session';
import { AnySQLiteTable, GetTableConfig, InferModel } from '../table';
import { JoinFn, JoinNullability, JoinType, SelectMode, SelectResult, SQLiteSelectConfig } from './select.types';
export interface SQLiteSelect<TTable extends AnySQLiteTable, TResultType extends 'sync' | 'async', TRunResult, TResult = InferModel<TTable>, TSelectMode extends SelectMode = 'single', TJoinsNotNullable extends Record<string, JoinNullability> = Record<GetTableConfig<TTable, 'name'>, 'not-null'>> extends SQLWrapper {
}
export declare class SQLiteSelect<TTable extends AnySQLiteTable, TResultType extends 'sync' | 'async', TRunResult, TResult = InferModel<TTable>, TSelectMode extends SelectMode = 'single', TJoinsNotNullable extends Record<string, JoinNullability> = Record<GetTableConfig<TTable, 'name'>, 'not-null'>> implements SQLWrapper {
    private session;
    private dialect;
    protected $table: TTable;
    protected $selectMode: TSelectMode;
    protected $result: TResult;
    private config;
    private isPartialSelect;
    private joinsNotNullable;
    constructor(table: SQLiteSelectConfig['table'], fields: SQLiteSelectConfig['fields'], session: SQLiteSession, dialect: SQLiteDialect);
    private createJoin;
    leftJoin: JoinFn<TTable, TRunResult, TResultType, TSelectMode, "left", TResult, TJoinsNotNullable>;
    rightJoin: JoinFn<TTable, TRunResult, TResultType, TSelectMode, "right", TResult, TJoinsNotNullable>;
    innerJoin: JoinFn<TTable, TRunResult, TResultType, TSelectMode, "inner", TResult, TJoinsNotNullable>;
    fullJoin: JoinFn<TTable, TRunResult, TResultType, TSelectMode, "full", TResult, TJoinsNotNullable>;
    fields<TSelect extends SQLiteSelectFields>(fields: TSelect): Omit<SQLiteSelect<TTable, TResultType, TRunResult, TSelect, 'partial', TJoinsNotNullable>, 'fields'>;
    where(where: SQL | undefined): Omit<this, 'where' | `${JoinType}Join`>;
    orderBy(...columns: SQL[]): Omit<this, 'where' | `${JoinType}Join` | 'orderBy'>;
    groupBy(...columns: (AnySQLiteColumn | SQL)[]): Omit<this, 'where' | `${JoinType}Join`>;
    limit(limit: number | Placeholder): Omit<this, 'where' | `${JoinType}Join` | 'limit'>;
    offset(offset: number | Placeholder): Omit<this, 'where' | `${JoinType}Join` | 'offset'>;
    toSQL(): Query;
    prepare(): PreparedQuery<{
        type: TResultType;
        run: TRunResult;
        all: SelectResult<TResult, TSelectMode, TJoinsNotNullable>[];
        get: SelectResult<TResult, TSelectMode, TJoinsNotNullable>;
        values: any[][];
    }>;
    run: ReturnType<this['prepare']>['run'];
    all: ReturnType<this['prepare']>['all'];
    get: ReturnType<this['prepare']>['get'];
    values: ReturnType<this['prepare']>['values'];
}
//# sourceMappingURL=select.d.ts.map