import { SQLWrapper } from 'drizzle-orm/sql';
import { SQLiteAsyncDialect, SQLiteSyncDialect } from './dialect';
import { SQLiteDelete, SQLiteInsertBuilder, SQLiteSelect, SQLiteUpdateBuilder } from './query-builders';
import { ResultKind, SQLiteSession } from './session';
import { AnySQLiteTable } from './table';
export declare class BaseSQLiteDatabase<TResultType extends 'sync' | 'async', TRunResult> {
    constructor(
    /** @internal */
    dialect: {
        sync: SQLiteSyncDialect;
        async: SQLiteAsyncDialect;
    }[TResultType], 
    /** @internal */
    session: SQLiteSession<TResultType, TRunResult>);
    select<TTable extends AnySQLiteTable>(from: TTable): SQLiteSelect<TTable, TResultType, TRunResult>;
    update<TTable extends AnySQLiteTable>(table: TTable): SQLiteUpdateBuilder<TTable, TResultType, TRunResult>;
    insert<TTable extends AnySQLiteTable>(into: TTable): SQLiteInsertBuilder<TTable, TResultType, TRunResult>;
    delete<TTable extends AnySQLiteTable>(from: TTable): SQLiteDelete<TTable, TResultType, TRunResult>;
    run(query: SQLWrapper): ResultKind<TResultType, TRunResult>;
    all<T extends any = unknown>(query: SQLWrapper): ResultKind<TResultType, T[]>;
    get<T extends any = unknown>(query: SQLWrapper): ResultKind<TResultType, T>;
    values<T extends any[] = unknown[]>(query: SQLWrapper): ResultKind<TResultType, T[]>;
}
//# sourceMappingURL=db.d.ts.map