"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.blob = exports.SQLiteBlobBuffer = exports.SQLiteBlobBufferBuilder = exports.SQLiteBlobJson = exports.SQLiteBlobJsonBuilder = void 0;
const common_1 = require("./common");
class SQLiteBlobJsonBuilder extends common_1.SQLiteColumnBuilder {
    /** @internal */
    build(table) {
        return new SQLiteBlobJson(table, this.config);
    }
}
exports.SQLiteBlobJsonBuilder = SQLiteBlobJsonBuilder;
class SQLiteBlobJson extends common_1.SQLiteColumn {
    getSQLType() {
        return 'blob';
    }
    mapFromDriverValue(value) {
        return JSON.parse(value.toString());
    }
    mapToDriverValue(value) {
        return Buffer.from(JSON.stringify(value));
    }
}
exports.SQLiteBlobJson = SQLiteBlobJson;
class SQLiteBlobBufferBuilder extends common_1.SQLiteColumnBuilder {
    /** @internal */
    build(table) {
        return new SQLiteBlobBuffer(table, this.config);
    }
}
exports.SQLiteBlobBufferBuilder = SQLiteBlobBufferBuilder;
class SQLiteBlobBuffer extends common_1.SQLiteColumn {
    getSQLType() {
        return 'blob';
    }
}
exports.SQLiteBlobBuffer = SQLiteBlobBuffer;
function blob(name, config) {
    if ((config === null || config === void 0 ? void 0 : config.mode) === 'json') {
        return new SQLiteBlobJsonBuilder(name);
    }
    return new SQLiteBlobBufferBuilder(name);
}
exports.blob = blob;
//# sourceMappingURL=blob.js.map